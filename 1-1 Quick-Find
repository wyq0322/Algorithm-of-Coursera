// Java implementation
// Data Structrue: Interger array id[] of length N
//                 Interpretation: p and q are connected iff they have the same id
// Find: Check if p and q have the same id.
// Union: To merge components containing p and q, change all entries whose id equals id[p] to id[q]

public class QuickFindUF
{
  private int[] id; //create an int array
  
  // set id of each object to itself 
  // N array accesses
  
  public QuickFindUF(int N)
  {
    id = new id[N];
    for (int i = 0; i < N ; i++)
      id[i] = i;
  }
  
  // check wether p and q are in the same component 
  // 2 array accesses
  
  public boolean connected(int p, int q)
  {
   return id[p] == id[q];
  }
  
  // Change all entries with id[p] to id[q]
  // at most 2N+2 array accesses
  
  public void union(int p, int q)
  {
   int pid = id[p];
   int qip = id[q];
   for(int i = 0; i < id.length; i++)
    if(id[i] == pip) id[i] = qid;
  }
}


// initialize: N
// union: N
// find: 1

// defect: trees are flat, but too expensive to keep them flat.
//         Union too expensive (It takes N 2 array accesses to process a sequence of N union commands on N objects.).
